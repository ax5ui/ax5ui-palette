{"version":3,"sources":["ax5palette.js","ax5palette-tmpl.js"],"names":["UI","ax5","ui","U","util","PALETTE","addClass","className","_this","this","self","cfg","instanceId","getGuid","target","config","clickEventName","theme","animateTime","colors","preview","width","height","cellWidth","label","slider","trackHeight","amount","handleWidth","handleHeight","list","value","controls","columnKeys","xvar","alignHandle","item","repaint","$target","innerWidth","innerHeight","html","tmpl","get","$","root","find","css","forEach","c","_color","color","_amount","r","g","b","_color0value","lighten","getHexValue","_color1value","_color2value","darken","handleLeft","handleTop","each","idx","getAttribute","jQuery","extend","$item","push","off","on","e","console","log","init","onStateChanged","onClick","info","getError","main","palette_instance","arguments","isObject","setConfig","apply","palette","tmpl_frame","tmpl_colors","frame","tmplName","data","mustache","render","call"],"mappings":"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","file":"ax5palette.min.js","sourcesContent":["// ax5.ui.palette\n(function () {\n\n    const UI = ax5.ui;\n    const U = ax5.util;\n    let PALETTE;\n\n    UI.addClass({\n        className: \"palette\"\n    }, (function () {\n\n        /**\n         * @class ax5palette\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```js\n         * ```\n         */\n        return function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.target = null;\n            this.config = {\n                clickEventName: \"click\",\n                theme: 'default',\n                animateTime: 100,\n                colors: {\n                    preview: {\n                        width: 24,\n                        height: 24,\n                        cellWidth: 30\n                    },\n                    label: {\n                       width: 80\n                    },\n                    slider: {\n                        trackHeight: 8,\n                        amount: 30,\n                        handleWidth: 18,\n                        handleHeight: 18,\n                    },\n                    list: [\n                        {label: \"red\", value: \"#ff0000\"},\n                        {label: \"orange\", value: \"#ff9802\"},\n                        {label: \"yellow\", value: \"#ffff00\"},\n                        {label: \"green\", value: \"#00ff36\"},\n                        {label: \"blue\", value: \"#0000ff\"},\n                        {label: \"purple\", value: \"#ba00ff\"},\n                        //{label: \"skyblue\", value: \"#84e4ff\"},\n                        //{label: \"pink\", value: \"#ff77c4\"},\n                        {label: \"black\", value: \"#000000\"},\n                        {label: \"white\", value: \"#ffffff\"},\n                    ],\n                },\n                controls: {\n                    height: 30,\n                },\n                columnKeys: {}\n            };\n            this.xvar = {};\n            this.colors = [];\n\n            cfg = this.config;\n\n            const onStateChanged = (opts, that) => {\n                if (opts && opts.onStateChanged) {\n                    opts.onStateChanged.call(that, that);\n                }\n                else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                that = null;\n            };\n\n            /**\n             * get mouse position\n             * @param e\n             * @returns {{clientX, clientY}}\n             */\n            const getMousePosition = (e) => {\n                let mouseObj, originalEvent = (e.originalEvent) ? e.originalEvent : e;\n                mouseObj = ('changedTouches' in originalEvent && originalEvent.changedTouches) ? originalEvent.changedTouches[0] : originalEvent;\n                // clientX, Y 쓰면 스크롤에서 문제 발생\n                return {\n                    clientX: mouseObj.pageX,\n                    clientY: mouseObj.pageY\n                }\n            };\n\n            const alignHandle = (item) => {\n\n            };\n\n            const handleMoveEvent = {\n                \"on\": () => {\n                    jQuery(document.body)\n                        .on(\"mousemove.ax5palette-\" + this.instanceId, function (e) {\n                            let mouseObj = getMousePosition(e),\n                                da_grow;\n\n                            mouseObj = null;\n                            da_grow = null;\n                        })\n                        .on(\"mouseup.ax5palette-\" + this.instanceId, function (e) {\n                            handleMoveEvent.off();\n                            U.stopEvent(e);\n                        })\n                        .on(\"mouseleave.ax5palette-\" + this.instanceId, function (e) {\n                            handleMoveEvent.off();\n                            U.stopEvent(e);\n                        });\n\n                    jQuery(document.body)\n                        .attr('unselectable', 'on')\n                        .css('user-select', 'none')\n                        .on('selectstart', false);\n                },\n                \"off\": () => {\n                    self.xvar.resizerLived = false;\n\n                    jQuery(document.body)\n                        .off(\"mousemove.ax5palette-\" + this.instanceId)\n                        .off(\"mouseup.ax5palette-\" + this.instanceId)\n                        .off(\"mouseleave.ax5palette-\" + this.instanceId);\n\n                    jQuery(document.body)\n                        .removeAttr('unselectable')\n                        .css('user-select', 'auto')\n                        .off('selectstart');\n                }\n            };\n\n            const repaint = () => {\n                let box = {\n                    width: this.$target.innerWidth(),\n                    height: this.$target.innerHeight(),\n                };\n\n                // 패널 프레임 초기화\n                this.$target.html(PALETTE.tmpl.get(\"frame\", {}, cfg.columnKeys));\n\n                // 각 패널들을 캐싱~\n                this.$ = {\n                    \"root\": this.$target.find('[data-ax5palette-container=\"root\"]'),\n                    \"colors\": this.$target.find('[data-ax5palette-container=\"colors\"]'),\n                    \"controls\": this.$target.find('[data-ax5palette-container=\"controls\"]'),\n                };\n\n                //this.$[\"colors\"].css({height: box.height - cfg.controls.height});\n                //this.xvar.colorHeight = (box.height - cfg.controls.height) / cfg.colors.length;\n\n                this.$[\"controls\"].css({height: cfg.controls.height});\n\n                /// colors.list 색상 범위 결정\n                cfg.colors.list.forEach(function (c) {\n                    let _color = U.color(c.value);\n                    c._amount = 0;\n                    if (_color.r == 0 && _color.g == 0 && _color.b == 0) {\n                        c._color0value = \"#\" + _color.lighten(cfg.colors.slider.amount * 2).getHexValue();\n                        c._color1value = \"#\" + _color.lighten(cfg.colors.slider.amount).getHexValue();\n                        c._color2value = \"#\" + _color.getHexValue();\n                    } else {\n                        c._color0value = \"#\" + _color.lighten(cfg.colors.slider.amount).getHexValue();\n                        c._color1value = \"#\" + _color.getHexValue();\n                        c._color2value = \"#\" + _color.darken(cfg.colors.slider.amount).getHexValue();\n                    }\n                });\n\n                cfg.colors.slider.handleLeft = -cfg.colors.slider.handleWidth / 2;\n                cfg.colors.slider.handleTop = -cfg.colors.slider.handleHeight / 2;\n\n                // 팔렛트 컬러 패널 초기화\n                this.$[\"colors\"].html(PALETTE.tmpl.get(\"colors\", cfg, cfg.columnKeys));\n\n                this.$[\"colors\"].find('[data-ax5palette-color-index]').each(function () {\n                    let idx = this.getAttribute(\"data-ax5palette-color-index\");\n                    let color = cfg.colors.list[idx];\n                    let item = jQuery.extend({}, color);\n                    item.$item = jQuery(this);\n                    alignHandle(item);\n                    /////\n                    self.colors.push(item);\n                });\n\n                this.$[\"colors\"]\n                    .off(\"mousedown\")\n                    .on(\"mousedown\", '[data-panel=\"color-handle\"]', function (e) {\n                        console.log(e.target);\n                    });\n                //console.log(box);\n            };\n\n            /**\n             * Preferences of palette UI\n             * @method ax5palette.setConfig\n             * @param {Object} config\n             * @param {(Element||nodelist)} config.target\n             * @returns {ax5palette}\n             * @example\n             * ```js\n             * ```\n             */\n            //== class body start\n            this.init = function () {\n                // after setConfig();\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5palette\", \"401\", \"setConfig\"));\n                }\n                this.$target = jQuery(cfg.target);\n\n                repaint(); // 팔렛트 그리기.\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n\n                UI.palette_instance = UI.palette_instance || [];\n                UI.palette_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n        };\n    })());\n\n    PALETTE = ax5.ui.palette;\n})();","// ax5.ui.calendar.tmpl\n(function () {\n\n    const PALETTE = ax5.ui.palette;\n\n    const tmpl_frame = function (columnKeys) {\n        return `\n<div data-ax5palette-container=\"root\">\n    <div data-ax5palette-container=\"colors\"></div>\n    <div data-ax5palette-container=\"controls\"></div>\n</div>\n`;\n    };\n\n    const tmpl_colors = function (columnKeys) {\n        return `\n{{#colors}}\n{{#list}}\n<div data-ax5palette-color=\"{{label}}\" data-ax5palette-color-index=\"{{@i}}\">\n    <div data-panel=\"color-preview\" style=\"padding:{{preview.cellPadding}}px;width:{{preview.cellWidth}}px;\">\n        <div data-panel=\"color-box\" style=\"width:{{preview.width}}px;height:{{preview.height}}px;\"><div data-panel=\"color\" style=\"background-color:{{value}};\"></div></div>\n    </div>\n    <div data-panel=\"color-label\" style=\"width:{{label.width}}px;\">{{label}}</div>\n    <div data-panel=\"color-slider\">\n        <div data-panel=\"color-track\" style=\"height:{{slider.trackHeight}}px;background: linear-gradient(90deg, {{_color0value}}, {{_color1value}}, {{_color2value}}); \">\n            <div data-panel=\"color-handle\">\n                <div data-panel=\"color-handle-after\" style=\"width:{{slider.handleWidth}}px;height:{{slider.handleWidth}}px;left:{{slider.handleLeft}}px;top:{{slider.handleLeft}}px;\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n{{/list}}\n{{/colors}}\n`;\n    };\n\n\n    PALETTE.tmpl = {\n        \"frame\": tmpl_frame,\n        \"colors\": tmpl_colors,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(PALETTE.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}