{"version":3,"sources":["ax5palette.js","ax5palette-tmpl.js"],"names":["UI","ax5","ui","U","util","PALETTE","addClass","className","_this","this","cfg","instanceId","getGuid","target","config","clickEventName","theme","animateTime","colors","preview","width","height","cellWidth","label","slider","trackHeight","handleHeight","list","value","controls","columnKeys","xvar","repaint","$target","innerWidth","innerHeight","html","tmpl","get","$","root","find","css","forEach","c","console","log","init","onStateChanged","onClick","info","getError","jQuery","main","palette_instance","push","arguments","isObject","setConfig","apply","palette","tmpl_frame","tmpl_colors","frame","tmplName","data","mustache","render","call"],"mappings":"cACA,WAEA,GAAAA,GAAAC,IAAAC,GACAC,EAAAF,IAAAG,KACAC,EAAAA,MAEAL,GAAAM,UACAC,UAAA,WACA,WAUA,MAAA,YAAA,GAAAC,GAAAC,KAEAC,EAAAA,MAEAD,MAAAE,WAAAV,IAAAW,UACAH,KAAAI,OAAA,KACAJ,KAAAK,QACAC,eAAA,QACAC,MAAA,UACAC,YAAA,IACAC,QACAC,SACAC,MAAA,GACAC,OAAA,GACAC,UAAA,IAEAC,OACAH,MAAA,IAEAI,QACAC,YAAA,EACAC,aAAA,IAEAC,OACAJ,MAAA,MAAAK,MAAA,YACAL,MAAA,SAAAK,MAAA,YACAL,MAAA,SAAAK,MAAA,YACAL,MAAA,QAAAK,MAAA,YACAL,MAAA,OAAAK,MAAA,YACAL,MAAA,SAAAK,MAAA,YACAL,MAAA,UAAAK,MAAA,YACAL,MAAA,OAAAK,MAAA,YACAL,MAAA,QAAAK,MAAA,YACAL,MAAA,QAAAK,MAAA,aAGAC,UACAR,OAAA,IAEAS,eAEArB,KAAAsB,QAEArB,EAAAD,KAAAK,MAEA,IAWAkB,GAAA,aAEAZ,MAAAZ,EAAAyB,QAAAC,aACAb,OAAAb,EAAAyB,QAAAE,eAIA3B,GAAAyB,QAAAG,KAAA/B,EAAAgC,KAAAC,IAAA,WAAA5B,EAAAoB,aAGAtB,EAAA+B,GACAC,KAAAhC,EAAAyB,QAAAQ,KAAA,sCACAvB,OAAAV,EAAAyB,QAAAQ,KAAA,wCACAZ,SAAArB,EAAAyB,QAAAQ,KAAA,2CAMAjC,EAAA+B,EAAA,SAAAG,KAAArB,OAAAX,EAAAmB,SAAAR,SAGAX,EAAAQ,OAAAS,KAAAgB,QAAA,SAAAC,GACAC,QAAAC,IAAAF,EAAAhB,SAIApB,EAAA+B,EAAA,OAAAH,KAAA/B,EAAAgC,KAAAC,IAAA,SAAA5B,EAAAA,EAAAoB,aAgBArB,MAAAsC,KAAA,WAEAtC,KAAAuC,eAAAtC,EAAAsC,eACAvC,KAAAwC,QAAAvC,EAAAuC,QAEAvC,EAAAG,QACAgC,QAAAC,IAAA7C,IAAAiD,KAAAC,SAAA,aAAA,MAAA,cAEA1C,KAAAwB,QAAAmB,OAAA1C,EAAAG,QAEAmB,KAIAvB,KAAA4C,KAAA,WAEArD,EAAAsD,iBAAAtD,EAAAsD,qBACAtD,EAAAsD,iBAAAC,KAAA9C,MAEA+C,WAAArD,EAAAsD,SAAAD,UAAA,KACA/C,KAAAiD,UAAAF,UAAA,KAEAG,MAAAlD,KAAA+C,gBAIAnD,EAAAJ,IAAAC,GAAA0D,WC/IA,WAEA,GAAAvD,GAAAJ,IAAAC,GAAA0D,QAEAC,EAAA,SAAA/B,GACA,MAAA,gKAQAgC,EAAA,SAAAhC,GACA,MAAA,8yBAoBAzB,GAAAgC,MACA0B,MAAAF,EACA3C,OAAA4C,EAEAxB,IAAA,SAAA0B,EAAAC,EAAAnC,GACA,MAAA7B,KAAAiE,SAAAC,OAAA9D,EAAAgC,KAAA2B,GAAAI,KAAA3D,KAAAqB,GAAAmC","file":"ax5palette.min.js","sourcesContent":["// ax5.ui.palette\n(function () {\n\n    const UI = ax5.ui;\n    const U = ax5.util;\n    let PALETTE;\n\n    UI.addClass({\n        className: \"palette\"\n    }, (function () {\n\n        /**\n         * @class ax5palette\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```js\n         * ```\n         */\n        return function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.target = null;\n            this.config = {\n                clickEventName: \"click\",\n                theme: 'default',\n                animateTime: 100,\n                colors: {\n                    preview: {\n                        width: 24,\n                        height: 24,\n                        cellWidth: 30\n                    },\n                    label: {\n                       width: 80\n                    },\n                    slider: {\n                        trackHeight: 8,\n                        handleHeight: 15\n                    },\n                    list: [\n                        {label: \"red\", value: \"#ff0000\"},\n                        {label: \"orange\", value: \"#ff9802\"},\n                        {label: \"yellow\", value: \"#ffff00\"},\n                        {label: \"green\", value: \"#00ff36\"},\n                        {label: \"blue\", value: \"#0000ff\"},\n                        {label: \"purple\", value: \"#ba00ff\"},\n                        {label: \"skyblue\", value: \"#84e4ff\"},\n                        {label: \"pink\", value: \"#ff77c4\"},\n                        {label: \"black\", value: \"#000000\"},\n                        {label: \"white\", value: \"#ffffff\"},\n                    ],\n                },\n                controls: {\n                    height: 30,\n                },\n                columnKeys: {}\n            };\n            this.xvar = {};\n\n            cfg = this.config;\n\n            const onStateChanged = (opts, that) => {\n                if (opts && opts.onStateChanged) {\n                    opts.onStateChanged.call(that, that);\n                }\n                else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                that = null;\n            };\n\n            const repaint = () => {\n                let box = {\n                    width: this.$target.innerWidth(),\n                    height: this.$target.innerHeight(),\n                };\n\n                // 패널 프레임 초기화\n                this.$target.html(PALETTE.tmpl.get(\"frame\", {}, cfg.columnKeys));\n\n                // 각 패널들을 캐싱~\n                this.$ = {\n                    \"root\": this.$target.find('[data-ax5palette-container=\"root\"]'),\n                    \"colors\": this.$target.find('[data-ax5palette-container=\"colors\"]'),\n                    \"controls\": this.$target.find('[data-ax5palette-container=\"controls\"]'),\n                };\n\n                //this.$[\"colors\"].css({height: box.height - cfg.controls.height});\n                //this.xvar.colorHeight = (box.height - cfg.controls.height) / cfg.colors.length;\n\n                this.$[\"controls\"].css({height: cfg.controls.height});\n\n                /// colors.list 색상 범위 결정\n                cfg.colors.list.forEach(function (c) {\n                    console.log(c.value);\n                });\n\n                // 팔렛트 컬러 패널 초기화\n                this.$[\"colors\"].html(PALETTE.tmpl.get(\"colors\", cfg, cfg.columnKeys));\n\n                //console.log(box);\n            };\n\n            /**\n             * Preferences of palette UI\n             * @method ax5palette.setConfig\n             * @param {Object} config\n             * @param {(Element||nodelist)} config.target\n             * @returns {ax5palette}\n             * @example\n             * ```js\n             * ```\n             */\n            //== class body start\n            this.init = function () {\n                // after setConfig();\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5palette\", \"401\", \"setConfig\"));\n                }\n                this.$target = jQuery(cfg.target);\n\n                repaint(); // 팔렛트 그리기.\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n\n                UI.palette_instance = UI.palette_instance || [];\n                UI.palette_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n        };\n    })());\n\n    PALETTE = ax5.ui.palette;\n})();","// ax5.ui.calendar.tmpl\n(function () {\n\n    const PALETTE = ax5.ui.palette;\n\n    const tmpl_frame = function (columnKeys) {\n        return `\n<div data-ax5palette-container=\"root\">\n    <div data-ax5palette-container=\"colors\"></div>\n    <div data-ax5palette-container=\"controls\"></div>\n</div>\n`;\n    };\n\n    const tmpl_colors = function (columnKeys) {\n        return `\n{{#colors.list}}\n<div data-ax5palette-color=\"{{label}}\">\n    <div data-panel=\"color-preview\" style=\"padding:{{colors.preview.cellPadding}}px;width:{{colors.preview.cellWidth}}px;\">\n        <div data-panel=\"color-box\" style=\"width:{{colors.preview.width}}px;height:{{colors.preview.height}}px;\"><div data-panel=\"color\" style=\"background-color:{{value}};\"></div></div>\n    </div>\n    <div data-panel=\"color-label\" style=\"width:{{colors.label.width}}px;\">{{label}}</div>\n    <div data-panel=\"color-slider\">\n        <div data-panel=\"color-track\" style=\"height:{{colors.slider.trackHeight}}px;background: linear-gradient(-90deg, red, orange); \">\n            <div data-panel=\"color-handle\" data-color-lighten=\"0\">\n                \n            </div>\n        </div>\n    </div>\n</div>\n{{/colors.list}}\n`;\n    };\n\n\n    PALETTE.tmpl = {\n        \"frame\": tmpl_frame,\n        \"colors\": tmpl_colors,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(PALETTE.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}