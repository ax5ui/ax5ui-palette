{"version":3,"sources":["ax5palette.js","ax5palette-tmpl.js"],"names":["UI","ax5","ui","U","util","PALETTE","addClass","className","version","_this","this","cfg","instanceId","getGuid","target","config","clickEventName","theme","animateTime","colors","label","value","columnKeys","repaint","width","$target","innerWidth","height","innerHeight","html","tmpl","get","$","root","find","controls","init","onStateChanged","onClick","console","log","info","getError","jQuery","main","palette_instance","push","arguments","isObject","setConfig","apply","palette","tmpl_frame","tmpl_colors","frame","tmplName","data","mustache","render","call"],"mappings":"cACA,WAEA,GAAAA,GAAAC,IAAAC,GACAC,EAAAF,IAAAG,KACAC,EAAAA,MAEAL,GAAAM,UACAC,UAAA,UACAC,QAAA,cACA,WAUA,MAAA,YAAA,GAAAC,GAAAC,KAEAC,EAAAA,MAEAD,MAAAE,WAAAX,IAAAY,UACAH,KAAAI,OAAA,KAEAJ,KAAAK,QACAC,eAAA,QACAC,MAAA,UACAC,YAAA,IACAC,SACAC,MAAA,MAAAC,MAAA,YACAD,MAAA,SAAAC,MAAA,YACAD,MAAA,SAAAC,MAAA,YACAD,MAAA,QAAAC,MAAA,YACAD,MAAA,OAAAC,MAAA,YACAD,MAAA,SAAAC,MAAA,YACAD,MAAA,UAAAC,MAAA,YACAD,MAAA,OAAAC,MAAA,YACAD,MAAA,QAAAC,MAAA,YACAD,MAAA,QAAAC,MAAA,YAEAC,eAGAX,EAAAD,KAAAK,MAEA,IAWAQ,GAAA,aAEAC,MAAAf,EAAAgB,QAAAC,aACAC,OAAAlB,EAAAgB,QAAAG,eAIAnB,GAAAgB,QAAAI,KAAAxB,EAAAyB,KAAAC,IAAA,WAAApB,EAAAW,aAGAb,EAAAuB,GACAC,KAAAxB,EAAAgB,QAAAS,KAAA,sCACAf,OAAAV,EAAAgB,QAAAS,KAAA,wCACAC,SAAA1B,EAAAgB,QAAAS,KAAA,2CAIAzB,EAAAuB,EAAA,OAAAH,KAAAxB,EAAAyB,KAAAC,IAAA,UACAZ,OAAAR,EAAAQ,QACAR,EAAAW,aAgBAZ,MAAA0B,KAAA,WAEA1B,KAAA2B,eAAA1B,EAAA0B,eACA3B,KAAA4B,QAAA3B,EAAA2B,QAEA3B,EAAAG,QACAyB,QAAAC,IAAAvC,IAAAwC,KAAAC,SAAA,aAAA,MAAA,cAEAhC,KAAAe,QAAAkB,OAAAhC,EAAAG,QAEAS,KAIAb,KAAAkC,KAAA,WAEA5C,EAAA6C,iBAAA7C,EAAA6C,qBACA7C,EAAA6C,iBAAAC,KAAApC,MAEAqC,WAAA5C,EAAA6C,SAAAD,UAAA,KACArC,KAAAuC,UAAAF,UAAA,KAEAG,MAAAxC,KAAAqC,gBAIA1C,EAAAJ,IAAAC,GAAAiD,WCvHA,WAEA,GAAA9C,GAAAJ,IAAAC,GAAAiD,QAEAC,EAAA,SAAA9B,GACA,MAAA,gKAQA+B,EAAA,SAAA/B,GACA,MAAA,mGAUAjB,GAAAyB,MACAwB,MAAAF,EACAjC,OAAAkC,EAEAtB,IAAA,SAAAwB,EAAAC,EAAAlC,GACA,MAAArB,KAAAwD,SAAAC,OAAArD,EAAAyB,KAAAyB,GAAAI,KAAAjD,KAAAY,GAAAkC","file":"ax5palette.min.js","sourcesContent":["// ax5.ui.palette\n(function () {\n\n    const UI = ax5.ui;\n    const U = ax5.util;\n    let PALETTE;\n\n    UI.addClass({\n        className: \"palette\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        /**\n         * @class ax5palette\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```js\n         * ```\n         */\n        return function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.target = null;\n\n            this.config = {\n                clickEventName: \"click\",\n                theme: 'default',\n                animateTime: 100,\n                colors: [\n                    {label: \"red\", value: \"#ff0000\"},\n                    {label: \"orange\", value: \"#ff9802\"},\n                    {label: \"yellow\", value: \"#ffff00\"},\n                    {label: \"green\", value: \"#00ff36\"},\n                    {label: \"blue\", value: \"#0000ff\"},\n                    {label: \"purple\", value: \"#ba00ff\"},\n                    {label: \"skyblue\", value: \"#84e4ff\"},\n                    {label: \"pink\", value: \"#ff77c4\"},\n                    {label: \"black\", value: \"#000000\"},\n                    {label: \"white\", value: \"#ffffff\"},\n                ],\n                columnKeys: {}\n            };\n\n            cfg = this.config;\n\n            const onStateChanged = (opts, that) => {\n                if (opts && opts.onStateChanged) {\n                    opts.onStateChanged.call(that, that);\n                }\n                else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                that = null;\n            };\n\n            const repaint = () => {\n                let box = {\n                    width: this.$target.innerWidth(),\n                    height: this.$target.innerHeight(),\n                };\n\n                // 패널 프레임 초기화\n                this.$target.html(PALETTE.tmpl.get(\"frame\", {}, cfg.columnKeys));\n\n                // 각 패널들을 캐싱~\n                this.$ = {\n                    \"root\": this.$target.find('[data-ax5palette-container=\"root\"]'),\n                    \"colors\": this.$target.find('[data-ax5palette-container=\"colors\"]'),\n                    \"controls\": this.$target.find('[data-ax5palette-container=\"controls\"]'),\n                };\n\n                // 팔렛트 컬러 패널 초기화\n                this.$[\"colors\"].html(PALETTE.tmpl.get(\"colors\", {\n                    colors: cfg.colors\n                }, cfg.columnKeys));\n\n                //console.log(box);\n            };\n\n            /**\n             * Preferences of palette UI\n             * @method ax5palette.setConfig\n             * @param {Object} config\n             * @param {(Element||nodelist)} config.target\n             * @returns {ax5palette}\n             * @example\n             * ```js\n             * ```\n             */\n            //== class body start\n            this.init = function () {\n                // after setConfig();\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5palette\", \"401\", \"setConfig\"));\n                }\n                this.$target = jQuery(cfg.target);\n\n                repaint(); // 팔렛트 그리기.\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n\n                UI.palette_instance = UI.palette_instance || [];\n                UI.palette_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n        };\n    })());\n\n    PALETTE = ax5.ui.palette;\n})();","// ax5.ui.calendar.tmpl\n(function () {\n\n    const PALETTE = ax5.ui.palette;\n\n    const tmpl_frame = function (columnKeys) {\n        return `\n<div data-ax5palette-container=\"root\">\n    <div data-ax5palette-container=\"colors\"></div>\n    <div data-ax5palette-container=\"controls\"></div>\n</div>\n`;\n    };\n\n    const tmpl_colors = function (columnKeys) {\n        return `\n{{#colors}}\n<div data-ax5palette-panel=\"color\">\n{{label}} : {{value}}\n</div>\n{{/colors}}\n`;\n    };\n\n\n    PALETTE.tmpl = {\n        \"frame\": tmpl_frame,\n        \"colors\": tmpl_colors,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(PALETTE.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}