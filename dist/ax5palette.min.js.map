{"version":3,"sources":["ax5palette.js","ax5palette-tmpl.js"],"names":["UI","ax5","ui","U","util","PALETTE","addClass","className","_this","this","self","cfg","instanceId","getGuid","target","config","clickEventName","theme","animateTime","colors","preview","width","height","cellWidth","label","slider","trackHeight","amount","handleWidth","handleHeight","list","value","controls","columnKeys","xvar","getMousePosition","e","mouseObj","originalEvent","changedTouches","clientX","pageX","clientY","pageY","bindHandle","item","originalTrackWidth","$track","trackWidth","handleLeft","amountToHandleLeft","_amount","handleLeftToAmount","updatePreviewColor","amountToColor","$handle","css","left","$item","off","on","_originalHandleClientX","_originalHandleLeft","position","handleMoveEvent","onClick","call","_selectedColor","toUpperCase","color","$preview","background-color","$label","html","onUpdateColor","processor","black","_color","lighten","darken","getHexValue","white","normal","_uniqColor","colorToAmount","_diffColor","color1","getHsl","l","jQuery","document","body","da","newHandleLeft","stopEvent","attr","resizerLived","removeAttr","repaint","selectedColor","$target","innerWidth","innerHeight","tmpl","get","$","root","find","forEach","c","r","g","b","_color0value","_color1value","_color2value","sColor","minDiffColor","minDiffColorIndex","cidx","c1hsl","c2hsl","diffColor","Math","abs","h","s","handleTop","each","idx","getAttribute","extend","_index","push","init","onStateChanged","console","log","info","getError","setTimeout","trim","setSelectedColor","main","palette_instance","arguments","isObject","setConfig","apply","palette","tmpl_frame","tmpl_colors","frame","tmplName","data","mustache","render"],"mappings":"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","file":"ax5palette.min.js","sourcesContent":["// ax5.ui.palette\n(function () {\n\n    const UI = ax5.ui;\n    const U = ax5.util;\n    let PALETTE;\n\n    UI.addClass({\n        className: \"palette\"\n    }, (function () {\n\n        /**\n         * @class ax5palette\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```js\n         * ```\n         */\n        return function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.target = null;\n            this.config = {\n                clickEventName: \"click\",\n                theme: 'default',\n                animateTime: 100,\n                colors: {\n                    preview: {\n                        width: 24,\n                        height: 24,\n                        cellWidth: 30\n                    },\n                    label: {\n                       width: 80\n                    },\n                    slider: {\n                        trackHeight: 8,\n                        amount: 32,\n                        handleWidth: 18,\n                        handleHeight: 18,\n                    },\n                    list: [\n                        {label: \"red\", value: \"#ff0000\"},\n                        {label: \"orange\", value: \"#ff9802\"},\n                        {label: \"yellow\", value: \"#ffff00\"},\n                        {label: \"green\", value: \"#00ff36\"},\n                        {label: \"blue\", value: \"#0000ff\"},\n                        {label: \"purple\", value: \"#ba00ff\"},\n                        //{label: \"skyblue\", value: \"#84e4ff\"},\n                        //{label: \"pink\", value: \"#ff77c4\"},\n                        {label: \"black\", value: \"#000000\"},\n                        {label: \"white\", value: \"#ffffff\"},\n                    ],\n                },\n                controls: {\n                    height: 0,\n                },\n                columnKeys: {}\n            };\n            this.xvar = {};\n            this.colors = [];\n\n            cfg = this.config;\n\n            const onStateChanged = (opts, that) => {\n                if (opts && opts.onStateChanged) {\n                    opts.onStateChanged.call(that, that);\n                }\n                else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                that = null;\n            };\n\n            /**\n             * get mouse position\n             * @param e\n             * @returns {{clientX, clientY}}\n             */\n            const getMousePosition = (e) => {\n                let mouseObj, originalEvent = (e.originalEvent) ? e.originalEvent : e;\n                mouseObj = ('changedTouches' in originalEvent && originalEvent.changedTouches) ? originalEvent.changedTouches[0] : originalEvent;\n                // clientX, Y 쓰면 스크롤에서 문제 발생\n                return {\n                    clientX: mouseObj.pageX,\n                    clientY: mouseObj.pageY\n                }\n            };\n\n            const bindHandle = (item) => {\n                item.originalTrackWidth = item.$track.width();\n                item.trackWidth = item.originalTrackWidth - (cfg.colors.slider.handleWidth / 5);\n                let handleLeft = amountToHandleLeft(item, item._amount);\n\n                // handleLeft 가 범위를 벗어나면?\n                if (handleLeft < 0 || handleLeft > item.trackWidth) {\n                    let amount;\n                    handleLeft = handleLeft < 0 ? 0 : handleLeft > item.trackWidth ? item.trackWidth : handleLeft;\n                    amount = handleLeftToAmount(item, handleLeft);\n                    updatePreviewColor(item, amountToColor(item, amount));\n                }\n\n                item.$handle.css({left: handleLeft});\n                item.$item\n                    .off(\"mousedown\")\n                    .on(\"mousedown\", '[data-panel=\"color-handle\"]', function (e) {\n                        let mouseObj = getMousePosition(e);\n                        item._originalHandleClientX = mouseObj.clientX;\n                        item._originalHandleLeft = item.$handle.position().left;\n                        handleMoveEvent.on(item);\n                    })\n                    .off(\"click\")\n                    .on(\"click\", '[data-panel=\"color-label\"], [data-panel=\"color-preview\"]', function (e) {\n                        if(self.onClick){\n                            self.onClick.call(item, '#' + item._selectedColor.toUpperCase());\n                        }\n                    });\n            };\n\n            const updatePreviewColor = (item, color) => {\n                //console.log(color);\n                item.$preview\n                    .css({\"background-color\": '#' + color});\n                item.$label.html('#' + color.toUpperCase());\n                item._selectedColor = color;\n\n                if(self.onUpdateColor){\n                    self.onUpdateColor.call(item, '#' + item._selectedColor.toUpperCase());\n                }\n            };\n\n            const amountToColor = (item, amount) => {\n                let processor = {\n                    \"black\"(_color, _amount){\n                        return _color.lighten(cfg.colors.slider.amount / 2).darken(_amount).getHexValue();\n                    },\n                    \"white\"(_color, _amount){\n                        return _color.darken(cfg.colors.slider.amount / 2).darken(_amount).getHexValue();\n                    },\n                    \"normal\"(_color, _amount){\n                        return _color.darken(_amount).getHexValue();\n                    }\n                };\n\n                if (item._uniqColor in processor) {\n                    return processor[item._uniqColor](item._color, amount);\n                } else {\n                    return processor[\"normal\"](item._color, amount);\n                }\n            };\n\n            const colorToAmount = (item, color) => {\n                /// todo : 색상에 가까운 색 표현.\n                let processor = {\n                    \"black\"(_color, _diffColor){\n                        let color1 = _color.lighten(cfg.colors.slider.amount / 2);\n                        return (color1.getHsl().l - _diffColor.getHsl().l) * 100;\n                    },\n                    \"white\"(_color, _diffColor){\n                        let color1 = _color.darken(cfg.colors.slider.amount / 2);\n                        return (color1.getHsl().l - _diffColor.getHsl().l) * 100;\n                    },\n                    \"normal\"(_color, _diffColor){\n                        return (_color.getHsl().l - _diffColor.getHsl().l) * 100;\n                    }\n                };\n\n                if (item._uniqColor in processor) {\n                    return processor[item._uniqColor](item._color, color);\n                } else {\n                    return processor[\"normal\"](item._color, color);\n                }\n            };\n\n            const handleLeftToAmount = (item, handleLeft) => {\n                return cfg.colors.slider.amount * (handleLeft - (item.trackWidth / 2)) / (item.originalTrackWidth / 2)\n            };\n\n            const amountToHandleLeft = (item, amount) => {\n                return (amount * (item.originalTrackWidth / 2) / cfg.colors.slider.amount) + (item.trackWidth / 2)\n            };\n\n            const handleMoveEvent = {\n                \"on\": (item) => {\n                    jQuery(document.body)\n                        .on(\"mousemove.ax5palette-\" + this.instanceId, function (e) {\n                            let mouseObj = getMousePosition(e),\n                                da = mouseObj.clientX - item._originalHandleClientX,\n                                newHandleLeft = item._originalHandleLeft + da,\n                                amount;\n\n                            newHandleLeft = newHandleLeft < 0 ? 0 : newHandleLeft > item.trackWidth ? item.trackWidth : newHandleLeft;\n                            item.$handle.css({left: newHandleLeft});\n                            amount = handleLeftToAmount(item, newHandleLeft);\n\n                            updatePreviewColor(item, amountToColor(item, amount));\n                            \n                            mouseObj = null;\n                            da = null;\n                        })\n                        .on(\"mouseup.ax5palette-\" + this.instanceId, function (e) {\n                            handleMoveEvent.off();\n                            U.stopEvent(e);\n                        })\n                        .on(\"mouseleave.ax5palette-\" + this.instanceId, function (e) {\n                            handleMoveEvent.off();\n                            U.stopEvent(e);\n                        });\n\n                    jQuery(document.body)\n                        .attr('unselectable', 'on')\n                        .css('user-select', 'none')\n                        .on('selectstart', false);\n                },\n                \"off\": () => {\n                    self.xvar.resizerLived = false;\n\n                    jQuery(document.body)\n                        .off(\"mousemove.ax5palette-\" + this.instanceId)\n                        .off(\"mouseup.ax5palette-\" + this.instanceId)\n                        .off(\"mouseleave.ax5palette-\" + this.instanceId);\n\n                    jQuery(document.body)\n                        .removeAttr('unselectable')\n                        .css('user-select', 'auto')\n                        .off('selectstart');\n                }\n            };\n\n            const repaint = (selectedColor) => {\n                let box = {\n                    width: this.$target.innerWidth(),\n                    height: this.$target.innerHeight(),\n                };\n\n                // 패널 프레임 초기화\n                this.$target.html(PALETTE.tmpl.get(\"frame\", {}, cfg.columnKeys));\n\n                // 각 패널들을 캐싱~\n                this.$ = {\n                    \"root\": this.$target.find('[data-ax5palette-container=\"root\"]'),\n                    \"colors\": this.$target.find('[data-ax5palette-container=\"colors\"]'),\n                    \"controls\": this.$target.find('[data-ax5palette-container=\"controls\"]'),\n                };\n\n                // todo : controls 나중에 고민하여 구현\n                // this.$[\"controls\"].css({height: cfg.controls.height});\n\n                /// colors.list 색상 범위 결정 / 초기화\n                cfg.colors.list.forEach(function (c) {\n                    c._color = U.color(c.value);\n                    c._selectedColor = c._color.getHexValue();\n                    if (c._color.r == 0 && c._color.g == 0 && c._color.b == 0) {\n                        c._amount = cfg.colors.slider.amount;\n                        c._uniqColor = \"black\";\n                        c._color0value = \"#\" + c._color.lighten(cfg.colors.slider.amount).getHexValue();\n                        c._color1value = \"#\" + c._color.lighten(cfg.colors.slider.amount / 2).getHexValue();\n                        c._color2value = \"#\" + c._color.getHexValue();\n                    } else if (c._color.r == 255 && c._color.g == 255 && c._color.b == 255) {\n                        c._amount = -cfg.colors.slider.amount;\n                        c._uniqColor = \"white\";\n                        c._color0value = \"#\" + c._color.getHexValue();\n                        c._color1value = \"#\" + c._color.darken(cfg.colors.slider.amount / 2).getHexValue();\n                        c._color2value = \"#\" + c._color.darken(cfg.colors.slider.amount).getHexValue();\n                    } else {\n                        c._amount = 0;\n                        c._color0value = \"#\" + c._color.lighten(cfg.colors.slider.amount).getHexValue();\n                        c._color1value = \"#\" + c._color.getHexValue();\n                        c._color2value = \"#\" + c._color.darken(cfg.colors.slider.amount).getHexValue();\n                    }\n                });\n\n                // 선택된 색상이 있다면 colors.list에서 조건에 맞는 색상 검색 시도.\n                if (selectedColor) {\n                    let sColor = U.color(selectedColor);\n                    // 지정된 색이 가장 가까운 파렛 검색\n                    let minDiffColor = 255 * 3, minDiffColorIndex = -1;\n                    cfg.colors.list.forEach(function (c, cidx) {\n                        let c1hsl = c._color.getHsl(), c2hsl =  sColor.getHsl();\n                        let diffColor = Math.abs(c1hsl.h - c2hsl.h) + Math.abs(c1hsl.s - c2hsl.s) + Math.abs(c1hsl.l - c2hsl.l);\n                        if (diffColor < minDiffColor) {\n                            minDiffColor = diffColor;\n                            minDiffColorIndex = cidx;\n                        }\n                    });\n\n                    if (minDiffColorIndex > -1) {\n                        cfg.colors.list[minDiffColorIndex]._amount = colorToAmount(cfg.colors.list[minDiffColorIndex], sColor);\n                        cfg.colors.list[minDiffColorIndex].label = selectedColor.toUpperCase();\n                    }\n                }\n\n                // 색생조절 핸들의 위치 조정\n                cfg.colors.slider.handleLeft = -cfg.colors.slider.handleWidth / 2;\n                cfg.colors.slider.handleTop = -cfg.colors.slider.handleHeight / 2;\n\n                // 팔렛트 컬러 패널 초기화\n                this.$[\"colors\"].html(PALETTE.tmpl.get(\"colors\", cfg, cfg.columnKeys));\n\n                this.$[\"colors\"].find('[data-ax5palette-color-index]').each(function () {\n                    let idx = this.getAttribute(\"data-ax5palette-color-index\");\n                    let color = cfg.colors.list[idx];\n                    let item = jQuery.extend({}, color);\n                    item._index = idx;\n                    item.$item = jQuery(this);\n                    item.$preview = item.$item.find('[data-panel=\"color\"]');\n                    item.$label = item.$item.find('[data-panel=\"color-label\"]');\n                    item.$track = item.$item.find('[data-panel=\"color-track\"]');\n                    item.$handle = item.$item.find('[data-panel=\"color-handle\"]');\n                    bindHandle(item);\n                    /////\n                    self.colors.push(item);\n                });\n\n                //console.log(box);\n            };\n\n            /**\n             * Preferences of palette UI\n             * @method ax5palette.setConfig\n             * @param {Object} config\n             * @param {Element} config.target\n             * @param {String} [config.selectedColor]\n             * @param {Object} [config.colors]\n             * @param {Object} [config.colors.preview]\n             * @param {Number} [config.colors.preview.width=24]\n             * @param {Number} [config.colors.preview.height=24]\n             * @param {Number} [config.colors.preview.cellWidth=30]\n             * @param {Object} [config.colors.label]\n             * @param {Number} [config.colors.label.width=80]\n             * @param {Object} [config.colors.slider]\n             * @param {Number} [config.colors.slider.trackHeight=8]\n             * @param {Number} [config.colors.slider.amount=32]\n             * @param {Number} [config.colors.slider.handleWidth=18]\n             * @param {Number} [config.colors.slider.handleHeight=18]\n             * @param {Object[]} [config.colors.list=[red,orange,yellow,green,blue,purple,black,white]]\n             * @param {String} config.colors.list[].label\n             * @param {String} config.colors.list[].value\n             * @param {Object} [config.controls]\n             * @param {Number} [config.controls.height=0]\n             * @returns {ax5palette}\n             * @example\n             * ```js\n             * myPalette = new ax5.ui.palette({\n             *  target: $('[data-ax5palette=\"01\"]'),\n             *  onClick: function (hexColor) {\n             *      alert(hexColor);\n             *  }\n             * });\n             *\n             * myPalette = new ax5.ui.palette({\n             *  target: $('[data-ax5palette=\"01\"]'),\n             *  colors: {\n             *      list: [\n             *          {label: \"red\", value: \"#ff0000\"},\n             *          {label: \"orange\", value: \"#ff9802\"},\n             *          {label: \"yellow\", value: \"#ffff00\"},\n             *          {label: \"skyblue\", value: \"#84e4ff\"},\n             *          {label: \"white\", value: \"#ffffff\"}\n             *      ]\n             *  }\n             *  onClick: function (hexColor) {\n             *  }\n             * });\n             * ```\n             */\n            this.init = function () {\n                // after setConfig();\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onUpdateColor = cfg.onUpdateColor;\n\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5palette\", \"401\", \"setConfig\"));\n                }\n                this.$target = jQuery(cfg.target);\n\n                setTimeout(function () {\n                    repaint((cfg.selectedColor||\"\").trim()); // 팔렛트 그리기.\n                });\n            };\n\n            /**\n             * @method ax5palette.repaint\n             * @returns {ax5palette}\n             */\n            this.repaint = function () {\n                repaint();\n                return this;\n            };\n\n            /**\n             * @method ax5palette.setSelectedColor\n             * @param selectedColor\n             * @returns {ax5palette}\n             */\n            this.setSelectedColor = function (selectedColor) {\n\n                let sColor = U.color(selectedColor.trim());\n                // 지정된 색이 가장 가까운 파렛 검색\n                let minDiffColor = 255 * 3, minDiffColorIndex = -1;\n\n                self.colors.forEach(function (c, cidx) {\n                    let c1hsl = c._color.getHsl(), c2hsl =  sColor.getHsl();\n                    let diffColor = Math.abs(c1hsl.h - c2hsl.h) + Math.abs(c1hsl.s - c2hsl.s) + Math.abs(c1hsl.l - c2hsl.l);\n                    if (diffColor < minDiffColor) {\n                        minDiffColor = diffColor;\n                        minDiffColorIndex = cidx;\n                    }\n                });\n\n                if (minDiffColorIndex > -1) {\n                    let amount, handleLeft,\n                        item = self.colors[minDiffColorIndex];\n\n                    item._amount = colorToAmount(item, sColor);\n                    handleLeft = amountToHandleLeft(item, item._amount);\n                    //handleLeft = handleLeft < 0 ? 0 : handleLeft > item.trackWidth ? item.trackWidth : handleLeft;\n                    item.$handle.css({left: handleLeft});\n\n                    amount = handleLeftToAmount(item, handleLeft);\n                    updatePreviewColor(item, amountToColor(item, amount));\n                }\n\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n\n                UI.palette_instance = UI.palette_instance || [];\n                UI.palette_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n        };\n    })());\n\n    PALETTE = ax5.ui.palette;\n})();","// ax5.ui.calendar.tmpl\n(function () {\n\n    const PALETTE = ax5.ui.palette;\n\n    const tmpl_frame = function (columnKeys) {\n        return `\n<div data-ax5palette-container=\"root\">\n    <div data-ax5palette-container=\"colors\"></div>\n    <div data-ax5palette-container=\"controls\"></div>\n</div>\n`;\n    };\n\n    const tmpl_colors = function (columnKeys) {\n        return `\n{{#colors}}\n{{#list}}\n<div data-ax5palette-color=\"{{label}}\" data-ax5palette-color-index=\"{{@i}}\">\n    <div data-panel=\"color-preview\" style=\"padding:{{preview.cellPadding}}px;width:{{preview.cellWidth}}px;\">\n        <div data-panel=\"color-box\" style=\"width:{{preview.width}}px;height:{{preview.height}}px;\"><div data-panel=\"color\" style=\"background-color:{{value}};\"></div></div>\n    </div>\n    <div data-panel=\"color-label\" style=\"width:{{label.width}}px;\">{{label}}</div>\n    <div data-panel=\"color-slider\">\n        <div data-panel=\"color-track\" style=\"height:{{slider.trackHeight}}px;background: linear-gradient(90deg, {{_color0value}}, {{_color1value}}, {{_color2value}}); \">\n            <div data-panel=\"color-handle\">\n                <div data-panel=\"color-handle-after\" style=\"width:{{slider.handleWidth}}px;height:{{slider.handleWidth}}px;left:{{slider.handleLeft}}px;top:{{slider.handleLeft}}px;\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n{{/list}}\n{{/colors}}\n`;\n    };\n\n\n    PALETTE.tmpl = {\n        \"frame\": tmpl_frame,\n        \"colors\": tmpl_colors,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(PALETTE.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}